import logging
import datetime
import re
import gspread
import os
import json
import asyncio
import signal
import sys
from google.oauth2.service_account import Credentials
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters

# === –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–æ–∫–µ–Ω —Ç–∞ JSON –∑ –æ—Ç–æ—á–µ–Ω–Ω—è ===
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
GOOGLE_CREDENTIALS_JSON = os.getenv('GOOGLE_CREDENTIALS_JSON')

if not TELEGRAM_TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –æ—Ç–æ—á–µ–Ω–Ω—ñ!")
if not GOOGLE_CREDENTIALS_JSON:
    raise RuntimeError("‚ùå GOOGLE_CREDENTIALS_JSON –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –æ—Ç–æ—á–µ–Ω–Ω—ñ!")

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
SCOPE = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]
SPREADSHEET_NAME = 'AccountsList'
SHEET_NAME = '–ê—Ä–∫—É—à1'

# –†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏
WORK_START_HOUR = 8   # 8:00
WORK_END_HOUR = 24    # 24:00 (0:00 –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–Ω—è)

logging.basicConfig(level=logging.INFO)

def is_work_time():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∑–∞—Ä–∞–∑ —Ä–æ–±–æ—á–∏–π —á–∞—Å"""
    current_hour = datetime.datetime.now().hour
    return WORK_START_HOUR <= current_hour < WORK_END_HOUR

def get_next_work_start():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —á–∞—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è"""
    now = datetime.datetime.now()
    next_start = now.replace(hour=WORK_START_HOUR, minute=0, second=0, microsecond=0)
    
    # –Ø–∫—â–æ –≤–∂–µ –ø—ñ–∑–Ω—ñ—à–µ —Ä–æ–±–æ—á–æ–≥–æ —á–∞—Å—É, —Ç–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å
    if now.hour >= WORK_END_HOUR or now.hour < WORK_START_HOUR:
        if now.hour >= WORK_END_HOUR:
            next_start += datetime.timedelta(days=1)
    
    return next_start

def get_credentials():
    """–°—Ç–≤–æ—Ä—é—î–º–æ credentials –Ω–∞–ø—Ä—è–º—É –∑ JSON string"""
    try:
        logging.info(f"JSON type: {type(GOOGLE_CREDENTIALS_JSON)}")
        logging.info(f"JSON length: {len(GOOGLE_CREDENTIALS_JSON)}")
        logging.info(f"First 100 chars: {GOOGLE_CREDENTIALS_JSON[:100]}")
        
        # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –ø–∞—Ä—Å–∏–Ω–≥—É
        creds_dict = None
        
        # –°–ø–æ—Å—ñ–± 1: —è–∫—â–æ —Ü–µ –≤–∂–µ —Å–ª–æ–≤–Ω–∏–∫
        if isinstance(GOOGLE_CREDENTIALS_JSON, dict):
            creds_dict = GOOGLE_CREDENTIALS_JSON
            logging.info("‚úÖ JSON –≤–∂–µ —î —Å–ª–æ–≤–Ω–∏–∫–æ–º")
        else:
            # –°–ø–æ—Å—ñ–± 2: –ø–∞—Ä—Å–∏–º–æ —è–∫ JSON string
            try:
                creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
                logging.info("‚úÖ JSON —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            except json.JSONDecodeError as e:
                logging.warning(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
                
                # –°–ø–æ—Å—ñ–± 3: –æ—á–∏—â—É—î–º–æ —Ç–∞ –ø–∞—Ä—Å–∏–º–æ
                try:
                    cleaned_json = GOOGLE_CREDENTIALS_JSON.strip().replace('\n', '').replace('\r', '')
                    creds_dict = json.loads(cleaned_json)
                    logging.info("‚úÖ JSON —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è")
                except json.JSONDecodeError as e2:
                    logging.warning(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è: {e2}")
                    
                    # –°–ø–æ—Å—ñ–± 4: decode escape sequences
                    try:
                        decoded_json = GOOGLE_CREDENTIALS_JSON.encode().decode('unicode_escape')
                        creds_dict = json.loads(decoded_json)
                        logging.info("‚úÖ JSON —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ –ø—ñ—Å–ª—è –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è")
                    except Exception as e3:
                        logging.error(f"‚ùå –í—Å—ñ —Å–ø–æ—Å–æ–±–∏ –Ω–µ –≤–¥–∞–ª–∏—Å—è: {e3}")
                        raise
        
        if not creds_dict or not isinstance(creds_dict, dict):
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –∑ JSON")
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
        required_fields = ['type', 'project_id', 'private_key', 'client_email']
        missing_fields = [field for field in required_fields if field not in creds_dict]
        
        if missing_fields:
            raise ValueError(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: {missing_fields}")
            
        logging.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω—ñ –ø–æ–ª—è: {list(creds_dict.keys())}")
        logging.info(f"‚úÖ Client email: {creds_dict.get('client_email', 'N/A')}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ credentials
        credentials = Credentials.from_service_account_info(creds_dict, scopes=SCOPE)
        logging.info("‚úÖ Credentials —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return credentials
        
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è credentials: {e}")
        logging.error(f"GOOGLE_CREDENTIALS_JSON type: {type(GOOGLE_CREDENTIALS_JSON)}")
        raise

def connect_sheet():
    """–ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ Google Sheets"""
    try:
        credentials = get_credentials()
        client = gspread.authorize(credentials)
        sheet = client.open(SPREADSHEET_NAME).worksheet(SHEET_NAME)
        logging.info("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets —É—Å–ø—ñ—à–Ω–µ")
        return sheet
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets: {e}")
        raise

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        text = update.message.text.strip()
        
        # –¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
        if text.lower() == '/test':
            try:
                sheet = connect_sheet()
                await update.message.reply_text("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets –ø—Ä–∞—Ü—é—î!")
            except:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets")
            return
            
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∞—Å—É
        if text.lower() == '/time':
            now = datetime.datetime.now()
            await update.message.reply_text(f"üïê –ó–∞—Ä–∞–∑: {now.hour:02d}:{now.minute:02d}\nüìÖ –†–æ–±–æ—á–∏–π —á–∞—Å: {WORK_START_HOUR:02d}:00 - {WORK_END_HOUR:02d}:00")
            return
            
        # –î–æ–≤—ñ–¥–∫–∞
        if text.lower() == '/help' or text.lower() == '/start':
            help_text = (
                "ü§ñ –ë–æ—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Google –¢–∞–±–ª–∏—Ü—è–º–∏\n\n"
                "–ö–æ–º–∞–Ω–¥–∏:\n"
                "/help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n"
                "/test - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è\n"
                "/time - –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å\n"
                "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
                "–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:\n"
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ä—è–¥–∫–∏ –∑ ID —Ç–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω–∏–º–∏ –º–µ—Ä–µ–∂–∞–º–∏:\n\n"
                "123456 Instagram\n"
                "789012 TikTok\n\n"
                "‚è∞ –†–æ–±–æ—á–∏–π —á–∞—Å: 08:00 - 24:00"
            )
            await update.message.reply_text(help_text)
            return
            
        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        if text.lower() == '/status':
            now = datetime.datetime.now()
            is_working = is_work_time()
            status_text = (
                f"üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
                f"üïê –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: {now.hour:02d}:{now.minute:02d}\n"
                f"üìÖ –î–∞—Ç–∞: {now.strftime('%Y-%m-%d')}\n"
                f"‚ö° –°—Ç–∞—Ç—É—Å: {'üü¢ –ü—Ä–∞—Ü—é—î' if is_working else 'üî¥ –ù–µ –ø—Ä–∞—Ü—é—î'}\n"
                f"‚è∞ –†–æ–±–æ—á–∏–π —á–∞—Å: {WORK_START_HOUR:02d}:00 - {WORK_END_HOUR:02d}:00"
            )
            if not is_working:
                next_start = get_next_work_start()
                status_text += f"\nüåÖ –ù–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø—É—Å–∫: {next_start.strftime('%H:%M')}"
            await update.message.reply_text(status_text)
            return
            
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        
        if not lines:
            await update.message.reply_text(
                "–ù–∞–¥—ñ—à–ª–∏ —Ä—è–¥–∫–∏ –∑ ID —ñ —Å–æ—Ü.\n\n"
                "–ü—Ä–∏–∫–ª–∞–¥:\n"
                "123456 Instagram\n"
                "789012 TikTok\n\n"
                "–ö–æ–º–∞–Ω–¥–∏:\n"
                "/help - –¥–æ–≤—ñ–¥–∫–∞\n"
                "/test - —Ç–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è\n" 
                "/time - –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å\n"
                "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
            )
            return

        sheet = connect_sheet()
        date_str = datetime.datetime.now().strftime("%Y-%m-%d")
        count = 0
        
        for line in lines:
            match = re.search(r'\d{6,}', line)
            if not match:
                continue
            id_ = match.group()
            social = line.replace(id_, '').strip()
            sheet.append_row([id_, date_str, social])
            count += 1
            
        if count > 0:
            await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ {count} —Ä—è–¥–∫—ñ–≤ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ.")
        else:
            await update.message.reply_text("‚ùó –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ ID.")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ:", exc_info=True)

class GracefulShutdown:
    """–ö–ª–∞—Å –¥–ª—è graceful shutdown"""
    def __init__(self):
        self.shutdown = False
        signal.signal(signal.SIGTERM, self._exit_gracefully)
        signal.signal(signal.SIGINT, self._exit_gracefully)

    def _exit_gracefully(self, signum, frame):
        logging.info(f"üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}, –∑—É–ø–∏–Ω—è—î–º–æ –±–æ—Ç–∞...")
        self.shutdown = True

async def run_scheduled_bot():
    """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞ —Ç—ñ–ª—å–∫–∏ –≤ —Ä–æ–±–æ—á–∏–π —á–∞—Å"""
    shutdown_handler = GracefulShutdown()
    
    while not shutdown_handler.shutdown:
        if is_work_time():
            logging.info(f"üü¢ –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ - —Ä–æ–±–æ—á–∏–π —á–∞—Å ({datetime.datetime.now().hour:02d}:00)")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
            app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
            app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
            
            try:
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
                await app.initialize()
                await app.start()
                await app.updater.start_polling()
                
                # –ü—Ä–∞—Ü—é—î–º–æ –ø–æ–∫–∏ —Ä–æ–±–æ—á–∏–π —á–∞—Å
                while is_work_time() and not shutdown_handler.shutdown:
                    await asyncio.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
                
                # –ó—É–ø–∏–Ω—è—î–º–æ –±–æ—Ç–∞
                await app.updater.stop()
                await app.stop()
                await app.shutdown()
                
                if not shutdown_handler.shutdown:
                    logging.info("üî¥ –ó—É–ø–∏–Ω–∏–ª–∏ –±–æ—Ç–∞ - –∫—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è")
                
            except Exception as e:
                logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –±–æ—Ç–∞: {e}")
                await asyncio.sleep(300)  # –ß–µ–∫–∞—î–º–æ 5 —Ö–≤–∏–ª–∏–Ω –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
                
        else:
            # –ù–µ —Ä–æ–±–æ—á–∏–π —á–∞—Å - —á–µ–∫–∞—î–º–æ
            next_start = get_next_work_start()
            now = datetime.datetime.now()
            sleep_seconds = (next_start - now).total_seconds()
            
            logging.info(f"üò¥ –ë–æ—Ç —Å–ø–∏—Ç—å –¥–æ {next_start.strftime('%H:%M')} ({sleep_seconds/3600:.1f} –≥–æ–¥)")
            
            # –°–ø–∏–º–æ, –∞–ª–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
            while sleep_seconds > 0 and not shutdown_handler.shutdown:
                sleep_time = min(300, sleep_seconds)  # –ú–∞–∫—Å–∏–º—É–º 5 —Ö–≤–∏–ª–∏–Ω
                await asyncio.sleep(sleep_time)
                sleep_seconds -= sleep_time
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –Ω–∞—Å—Ç–∞–≤ —Ä–æ–±–æ—á–∏–π —á–∞—Å
                if is_work_time():
                    break

if __name__ == '__main__':
    try:
        logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ scheduled –±–æ—Ç–∞...")
        asyncio.run(run_scheduled_bot())
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç–∞ –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)
