import logging
import datetime
import re
import gspread
import os
import json
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters

# === –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–æ–∫–µ–Ω —Ç–∞ JSON –∑ –æ—Ç–æ—á–µ–Ω–Ω—è ===
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
GOOGLE_CREDENTIALS_JSON = os.getenv('GOOGLE_CREDENTIALS_JSON')

if not TELEGRAM_TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –æ—Ç–æ—á–µ–Ω–Ω—ñ!")
if not GOOGLE_CREDENTIALS_JSON:
    raise RuntimeError("‚ùå GOOGLE_CREDENTIALS_JSON –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –æ—Ç–æ—á–µ–Ω–Ω—ñ!")

# === –°—Ç–≤–æ—Ä—é—î–º–æ credentials.json –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é ===
try:
    # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ —è–∫ JSON
    try:
        creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
        with open("credentials.json", "w", encoding="utf-8") as f:
            json.dump(creds_dict, f, indent=2)
        logging.info("‚úÖ credentials.json —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    except json.JSONDecodeError:
        # –Ø–∫—â–æ –Ω–µ JSON, —Å–ø—Ä–æ–±—É—î–º–æ –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ escape-–ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ
        creds_data = GOOGLE_CREDENTIALS_JSON.encode().decode('unicode_escape')
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≤–∞–ª—ñ–¥–Ω–∏–π JSON –ø—ñ—Å–ª—è –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è
        creds_dict = json.loads(creds_data)
        with open("credentials.json", "w", encoding="utf-8") as f:
            json.dump(creds_dict, f, indent=2)
        logging.info("‚úÖ credentials.json —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø—ñ—Å–ª—è –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è")
        
except Exception as e:
    logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ credentials.json: {e}")
    raise RuntimeError(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ credentials.json: {e}")

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google Sheets ===
SCOPE = [
    'https://spreadsheets.google.com/feeds', 
    'https://www.googleapis.com/auth/drive',
    'https://www.googleapis.com/auth/spreadsheets'
]
SPREADSHEET_NAME = 'AccountsList'
SHEET_NAME = '–ê—Ä–∫—É—à1'

logging.basicConfig(level=logging.INFO)

def connect_sheet():
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
        if not os.path.exists("credentials.json"):
            raise Exception("credentials.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
        creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", SCOPE)
        client = gspread.authorize(creds)
        sheet = client.open(SPREADSHEET_NAME).worksheet(SHEET_NAME)
        logging.info("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets —É—Å–ø—ñ—à–Ω–µ")
        return sheet
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets: {e}")
        raise

# === –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        
        if not lines:
            await update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ —Ä—è–¥–∫–∏ –∑ ID —ñ —Å–æ—Ü.")
            return

        sheet = connect_sheet()
        date_str = datetime.datetime.now().strftime("%Y-%m-%d")
        count = 0
        
        for line in lines:
            match = re.search(r'\d{6,}', line)
            if not match:
                continue
            id_ = match.group()
            social = line.replace(id_, '').strip()
            sheet.append_row([id_, date_str, social])
            count += 1
            
        if count > 0:
            await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ {count} —Ä—è–¥–∫—ñ–≤ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ.")
        else:
            await update.message.reply_text("‚ùó –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ ID.")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ:", exc_info=True)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    try:
        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞...")
        app.run_polling()
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
        raise
