import logging
import datetime
import re
import gspread
import os
import json
from google.oauth2.service_account import Credentials
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters

# === –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–æ–∫–µ–Ω —Ç–∞ JSON –∑ –æ—Ç–æ—á–µ–Ω–Ω—è ===
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
GOOGLE_CREDENTIALS_JSON = os.getenv('GOOGLE_CREDENTIALS_JSON')

if not TELEGRAM_TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –æ—Ç–æ—á–µ–Ω–Ω—ñ!")
if not GOOGLE_CREDENTIALS_JSON:
    raise RuntimeError("‚ùå GOOGLE_CREDENTIALS_JSON –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –æ—Ç–æ—á–µ–Ω–Ω—ñ!")

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google Sheets ===
SCOPE = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]
SPREADSHEET_NAME = 'AccountsList'
SHEET_NAME = '–ê—Ä–∫—É—à1'

logging.basicConfig(level=logging.INFO)

def get_credentials():
    """–°—Ç–≤–æ—Ä—é—î–º–æ credentials –Ω–∞–ø—Ä—è–º—É –∑ JSON string"""
    try:
        # –õ–æ–≥—É—î–º–æ –ø–µ—Ä—à—ñ —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logging.info(f"JSON –¥–æ–≤–∂–∏–Ω–∞: {len(GOOGLE_CREDENTIALS_JSON)}")
        logging.info(f"–ü–µ—Ä—à—ñ 50 —Å–∏–º–≤–æ–ª—ñ–≤: {GOOGLE_CREDENTIALS_JSON[:50]}")
        logging.info(f"–û—Å—Ç–∞–Ω–Ω—ñ 50 —Å–∏–º–≤–æ–ª—ñ–≤: {GOOGLE_CREDENTIALS_JSON[-50:]}")
        
        # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –ø–∞—Ä—Å–∏–Ω–≥—É
        creds_dict = None
        
        # –°–ø–æ—Å—ñ–± 1: –ø—Ä—è–º–∏–π JSON parse
        try:
            creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
            logging.info("‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø—ñ—à–Ω–∏–π (—Å–ø–æ—Å—ñ–± 1)")
        except json.JSONDecodeError as e:
            logging.warning(f"‚ùå –°–ø–æ—Å—ñ–± 1 –Ω–µ –≤–¥–∞–≤—Å—è: {e}")
            
            # –°–ø–æ—Å—ñ–± 2: –∑ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è–º escape-–ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç–µ–π
            try:
                decoded_json = GOOGLE_CREDENTIALS_JSON.encode().decode('unicode_escape')
                creds_dict = json.loads(decoded_json)
                logging.info("‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø—ñ—à–Ω–∏–π (—Å–ø–æ—Å—ñ–± 2)")
            except json.JSONDecodeError as e2:
                logging.warning(f"‚ùå –°–ø–æ—Å—ñ–± 2 –Ω–µ –≤–¥–∞–≤—Å—è: {e2}")
                
                # –°–ø–æ—Å—ñ–± 3: –æ—á–∏—â–µ–Ω–Ω—è –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
                try:
                    cleaned_json = GOOGLE_CREDENTIALS_JSON.strip().replace('\n', '').replace('\r', '')
                    creds_dict = json.loads(cleaned_json)
                    logging.info("‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø—ñ—à–Ω–∏–π (—Å–ø–æ—Å—ñ–± 3)")
                except json.JSONDecodeError as e3:
                    logging.error(f"‚ùå –í—Å—ñ —Å–ø–æ—Å–æ–±–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –Ω–µ –≤–¥–∞–ª–∏—Å—è: {e3}")
                    raise
        
        if not creds_dict:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON")
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
        required_fields = ['type', 'project_id', 'private_key_id', 'private_key', 'client_email', 'client_id']
        missing_fields = [field for field in required_fields if field not in creds_dict]
        
        if missing_fields:
            raise ValueError(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –≤ JSON: {missing_fields}")
            
        logging.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω—ñ –ø–æ–ª—è: {list(creds_dict.keys())}")
        logging.info(f"‚úÖ Client email: {creds_dict.get('client_email', 'N/A')}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ credentials –Ω–∞–ø—Ä—è–º—É –∑ —Å–ª–æ–≤–Ω–∏–∫–∞
        credentials = Credentials.from_service_account_info(creds_dict, scopes=SCOPE)
        logging.info("‚úÖ Credentials —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return credentials
        
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è credentials: {e}")
        raise

def connect_sheet():
    """–ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ Google Sheets"""
    try:
        credentials = get_credentials()
        client = gspread.authorize(credentials)
        sheet = client.open(SPREADSHEET_NAME).worksheet(SHEET_NAME)
        logging.info("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets —É—Å–ø—ñ—à–Ω–µ")
        return sheet
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets: {e}")
        raise

# === –¢–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è ===
def test_connection():
    """–¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets"""
    try:
        sheet = connect_sheet()
        # –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫
        first_row = sheet.row_values(1) if sheet.row_count > 0 else []
        logging.info(f"‚úÖ –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–∏–π. –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫: {first_row}")
        return True
    except Exception as e:
        logging.error(f"‚ùå –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–≤—Å—è: {e}")
        return False

# === –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        
        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        if text.lower() == '/test':
            if test_connection():
                await update.message.reply_text("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets –ø—Ä–∞—Ü—é—î!")
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets")
            return
            
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        
        if not lines:
            await update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ —Ä—è–¥–∫–∏ –∑ ID —ñ —Å–æ—Ü.\n–ê–±–æ –≤—ñ–¥–ø—Ä–∞–≤ /test –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.")
            return

        sheet = connect_sheet()
        date_str = datetime.datetime.now().strftime("%Y-%m-%d")
        count = 0
        
        for line in lines:
            match = re.search(r'\d{6,}', line)
            if not match:
                continue
            id_ = match.group()
            social = line.replace(id_, '').strip()
            sheet.append_row([id_, date_str, social])
            count += 1
            
        if count > 0:
            await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ {count} —Ä—è–¥–∫—ñ–≤ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ.")
        else:
            await update.message.reply_text("‚ùó –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ ID.")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ:", exc_info=True)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    try:
        # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
        logging.info("üîß –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets...")
        test_connection()
        
        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞...")
        app.run_polling()
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
        raise
